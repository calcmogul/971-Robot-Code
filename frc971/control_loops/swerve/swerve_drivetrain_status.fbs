include "frc971/control_loops/profiled_subsystem.fbs";
include "frc971/control_loops/drivetrain/drivetrain_status.fbs";
include "frc971/math/matrix.fbs";

namespace frc971.control_loops.swerve;

table SwerveModuleStatus {
    // Goal speed in meters per second.
    goal_translation_speed:double (id: 0);
    // Absolute encoder for rotation
    rotation:frc971.control_loops.AbsoluteEncoderProfiledJointStatus (id: 1);
    // Translation speed in meters per second.
    translation_speed:double (id: 2);
}

attribute "static_length";

// Represents the state of the "naive estimator" which does not even perform
// any Kalman filter corrections to estimate the swerve drivetrain tstate.
table NaiveEstimatorStatus {
  // Zeroing state of each swerve module.
  estimator_states:[frc971.AbsoluteEncoderEstimatorState] (id: 0, static_length: 4);
  // Internal state of the estimator; see naive_estimator.h.
  position_state:frc971.fbs.Matrix (id: 1);
  // Exposed robot position & velocities (these are components of position_state
  // which are exposed for human readability).
  x:float (id: 2);
  y: float (id: 3);
  yaw:float (id: 4);
  vx:float (id: 5);
  vy:float (id: 6);
  omega:float (id: 7);
  // Estimated per-module drive velocities, in m/s.
  module_drive_velocities:[float] (id: 8);
  x_hat: frc971.fbs.Matrix (id: 9);
}

// Debugging information for the linear swerve controllers.
table LinearControllerStatus {
  // Current full goal state (including any inverse kinematics/dynamics.
  goal_state:frc971.fbs.Matrix (id: 0);
  // Current feedback components of the output currents.
  feedback_currents:frc971.fbs.Matrix (id: 1);
  // Current feedforwards components of the output currents.
  feedforwards_currents:frc971.fbs.Matrix (id: 2);
  // Matrix describing how each bit of state error contributes to the
  // feedback currents. Each column corresponds to a single state and
  // the columns summed together will equal the feedback_currents member.
  feedback_contributions:frc971.fbs.Matrix (id: 3);
  // Result of the DARE solver (0 = success).
  sb02od_result:uint (id: 4);
}

// Debug information corresponding to a single measurement correction for
// the kalman filter.
table CorrectionDebug {
  // The actual measurement for this correction.
  measurement:frc971.fbs.Matrix (id: 0);
  // The expected measurement at the time that we performed this correction.
  expected:frc971.fbs.Matrix (id: 1);
  // How much X_hat was updated by the predict step of this correction.
  // Will be zero for corrections which do not involve any timestep.
  predict_update:frc971.fbs.Matrix (id: 2);
  // How much X_hat was updated by the correct step of this correction.
  correct_update:frc971.fbs.Matrix (id: 3);
}

// Debug information for the kalman filter.
table VelocityEkfStatus {
  // Debug information indicating the various sensor updates which we can do.
  gyro_correction:CorrectionDebug (id: 0);
  steer_correction:CorrectionDebug (id: 1);
  drive_correction:CorrectionDebug (id: 2);
  // Current state estimate and covariance.
  x_hat:frc971.fbs.Matrix (id: 3);
  p:frc971.fbs.Matrix (id: 4);
}

table Status {
    front_left_status:SwerveModuleStatus (id: 0);
    front_right_status:SwerveModuleStatus (id: 1);
    back_left_status:SwerveModuleStatus (id: 2);
    back_right_status:SwerveModuleStatus (id: 3);
    naive_estimator:NaiveEstimatorStatus (id: 4);
    linear_controller:LinearControllerStatus (id: 5);
    velocity_ekf:VelocityEkfStatus (id: 6);
    imu_zeroer:frc971.control_loops.drivetrain.ImuZeroerState (id: 7);
}

root_type Status;
