include "frc971/vision/calibration.fbs";
include "frc971/control_loops/profiled_subsystem.fbs";
include "frc971/zeroing/constants.fbs";
include "frc971/math/matrix.fbs";
include "frc971/wpilib/swerve/swerve_constants.fbs";
include "frc971/control_loops/swerve/swerve_zeroing.fbs";
include "frc971/vision/target_map_field.fbs";
include "frc971/input/swerve_input_config.fbs";

namespace y2025;

table CameraConfiguration {
  calibration:frc971.vision.calibration.CameraCalibration (id: 0);
}

table ElevatorSetPoints {
  neutral:double (id: 0);
  intake_hp:double (id: 1);
  intake_ground:double (id: 2);
  score_l1:double (id: 3);
  score_l2:double (id: 4);
  score_l3:double (id: 5);
  score_l4:double (id: 6);
  algae_l2:double (id: 7);
  algae_l3:double (id: 8);
}

table PivotSetPoints {
  neutral:double (id: 0);
  intake_hp:double (id: 1);
  intake_ground:double (id: 2);
  score_l1:double (id: 3);
  score_l2:double (id: 4);
  score_l3:double (id: 5);
  score_l4:double (id: 6);
  algae_l2:double (id: 7);
  algae_l3:double (id: 8);
}

table WristSetPoints {
  neutral: double (id: 0);
  intake_hp: double (id: 1);
  intake_ground: double (id: 2);
  score_l1:double (id: 3);
  score_l2:double (id: 4);
  score_l3:double (id: 5);
  score_l4:double (id: 6);
  algae_l2:double (id: 7);
  algae_l3:double (id: 8);
}

table PotAndAbsEncoderConstants {
  zeroing_constants:frc971.zeroing.PotAndAbsoluteEncoderZeroingConstants (id: 0);
  potentiometer_offset:double (id: 1);
}

table AbsEncoderConstants {
  zeroing_constants:frc971.zeroing.AbsoluteEncoderZeroingConstants (id: 0);
}

table RobotConstants {
  elevator_constants:PotAndAbsEncoderConstants (id: 0);
  pivot_constants:PotAndAbsEncoderConstants (id: 1);
  climber_constants:PotAndAbsEncoderConstants (id: 2);
  input_config: frc971.input.InputConfig (id: 3);
  swerve_zeroing:frc971.control_loops.swerve.SwerveZeroing (id: 4);
  wrist_constants:AbsEncoderConstants (id: 5);
}

table EndEffectorVoltages {
  spit:double (id: 0);
  intake:double (id: 1);
}

table ClimberCurrent {
  climb:double (id: 0);
  retract:double (id: 1);
  input_config: frc971.input.InputConfig (id: 2);
  swerve_zeroing:frc971.control_loops.swerve.SwerveZeroing (id: 3);
}

table VelocityControllerWeights {
  thetas_q: double (id: 0);
  omegas_q: double (id: 1);
  omegad_q: double (id: 2);
  k_slip: double (id: 3);
  vel_q: double (id: 4);
  omega_q: double (id: 5);
  theta_q: double (id: 6);
  steer_current_r: double (id: 7);
  drive_current_r: double (id: 8);
}

table Location {
  x: double (id: 0);
  y: double (id: 1);
}

// Common table for constants unrelated to the robot
table Common {
  target_map:frc971.vision.TargetMapField (id: 0);
  swerve_positions_constants:frc971.wpilib.swerve.SwervePositionConstants (id: 1);
  current_limits:CurrentLimits (id: 2);
  translation_module_ratio:double (id: 3);
  pivot:frc971.control_loops.StaticZeroingSingleDOFProfiledSubsystemCommonParams (id: 4);
  elevator:frc971.control_loops.StaticZeroingSingleDOFProfiledSubsystemCommonParams (id: 5);
  elevator_set_points:ElevatorSetPoints (id: 6);
  pivot_set_points:PivotSetPoints (id: 7);
  end_effector_voltages:EndEffectorVoltages (id: 8);
  climber_current:ClimberCurrent(id: 9);
  weights: VelocityControllerWeights (id: 10);
  rotation:frc971.control_loops.StaticZeroingSingleDOFProfiledSubsystemCommonParams (id: 11);
  wrist:frc971.control_loops.StaticZeroingSingleDOFProfiledSubsystemCommonParams (id: 12);
  wrist_set_points:WristSetPoints(id: 13);
  reef_apriltag_ids: [int] (id: 14);
  end_effector_idling_voltage: double (id: 15);
  reef_locations: [Location] (id: 16);
  HP_locations: [Location] (id: 17);
}

table Constants {
  cameras:[CameraConfiguration] (id: 0);
  robot:RobotConstants (id: 1);
  common:Common (id: 2);
}

table CurrentLimits {
  drivetrain_stator_current_limit:double (id: 0);
  drivetrain_supply_current_limit:double (id: 1);
  elevator_stator_current_limit:double (id: 2);
  elevator_supply_current_limit:double (id: 3);
  pivot_stator_current_limit:double (id: 4);
  pivot_supply_current_limit:double (id: 5);
  end_effector_stator_current_limit:double (id: 6);
  end_effector_supply_current_limit:double (id: 7);
  climber_stator_current_limit:double (id: 8);
  climber_supply_current_limit:double (id: 9);
  wrist_stator_current_limit:double (id: 10);
  wrist_supply_current_limit:double (id: 11);
}

root_type Constants;
